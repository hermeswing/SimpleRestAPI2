##############################################################
# Server port
# server.tomcat.threads.min-spare : 톰캣워커 스레드풀의 최소값을 설정한다.
# server.tomcat.threads.max : 톰캣 워커 스레드 풀의 최대값을 설정한다.
server:
  port: 8080
  servlet:
    context-path: /
    encoding:
      enabled: true
      charset: UTF-8
      force: true
    session:
      timeout: 120                              # 기본단위 : 초
  tomcat:
    uri-encoding: UTF-8                         # Spring Default : UTF-8
    threads:
      min-spare: 100
      max: 100

##############################################################
# -Dspring.profiles.active=local
# Spring Framework에서 사용되는 속성으로, 애플리케이션이 시작될 때 추가 프로필을 활성화하는 데 사용
# 지정된 기준에 따라 프로필을 조건부로 포함시킬 수 있습니다.
# 이 속성을 설정하면 Spring은 구성 파일이나 환경 변수를 통해 이미 활성화된 프로필에 추가로 지정된 프로필을 활성화합니다.
# 이는 코드베이스를 수정하지 않고도 서로 다른 환경 또는 시나리오에 대한 다양한 구성을 관리할 수 있습니다.
# spring.profiles.active : 이 속성은 현재 활성화할 프로파일을 지정하는 데 사용
# spring.profiles.include : 이 속성은 추가로 포함할 프로파일을 지정하는 데 사용
spring:
  profiles:
    active: local
  #include: local
  ##############################################################
  # Redis 설정
  redis:
    host: localhost
    lettuce:
      pool:
        enabled: true
        max-active: 8       # pool에 할당될 수 있는 커넥션 최대수 (음수로 하면 무제한)
        max-idle: 8         # 풀에서 관리하는 idle 커넥션의 쵀소수 대상 (양수일 때만 유효)
        max-wait: -1        # pool이 바닥났을 때 예외 발생 전, 커넥션 할당 차단 최대 시간(단위 밀리세컨드, 음수는 무제한 차단)
        min-idle: 0         # 풀에서 관리하는 idle 커넥션의 쵀소수 대상 (양수일 때만 유효)
    port: 6379              # 레디스 서버 포트
    # 레디스 서버 이름
    #spring.redis.sentinel.master
    # 호스트: 포트 쌍 목록 (콤마로 구분)
    #spring.redis.sentinel.nodes=
    # 커넥션 타임아웃 (단위 밀리세컨드)
    timeout: 0
  ##############################################################
  # Swagger pathmatch
  # spring.mvc.pathmatch.matching-strategy=ant_path_matcher
  mvc:
    pathmatch:
      matching-strategy: ant-path-matcher
##############################################################
# Logging
logging:
  config: classpath:logback-local.xml

##############################################################
# JWT 사용자 설정
# secretKey는 SignatureAlgorithm.HS512 알고리즘을 사용할 예정이기 때문에
# Secret Key는 64Byte 이상 되어야 한다.
custom:
  jwt:
    header: Authorization
    secretKey: MySecretKeyABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890ABCDE
    refresh-token-validity-in-seconds: 1209600000  # 14일
    #token-validity-in-seconds: 43200000            # 12시간 ( 3600000; // 1시간 )
    token-validity-in-seconds: 86400000            # 24시간
    cookie-expiration: 7776000000                  # 90일
